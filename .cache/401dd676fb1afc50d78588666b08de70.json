{"dependencies":[{"name":"tape","loc":{"line":1,"column":17}},{"name":"../src","loc":{"line":2,"column":25}}],"generated":{"js":"\"use strict\";\n\nvar _tape = require(\"tape\");\n\nvar _tape2 = _interopRequireDefault(_tape);\n\nvar _src = require(\"../src\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _tape2.default)(\"text node\", assert => {\n  const vnode = { _text: \"raw text\" };\n  const node = (0, _src.mount)(vnode);\n  assert.equal(node.nodeName, \"#text\");\n  assert.equal(node.nodeValue, \"raw text\");\n  assert.end();\n});\n\n(0, _tape2.default)(\"simple element\", assert => {\n  const vnode = (0, _src.h)(\"span\", { \"data-type\": \"span\", class: \"input\", style: \"color: red\" }, \"span content\");\n  const node = (0, _src.mount)(vnode);\n  assert.equal(vnode._node, node);\n  assert.equal(vnode.content[0]._node, node.firstChild);\n\n  assert.equal(node.nodeName, \"SPAN\");\n  assert.equal(node.dataset.type, \"span\");\n  assert.equal(node.className, \"input\");\n  assert.equal(node.style.color, \"red\");\n  assert.equal(node.childNodes.length, 1);\n  assert.equal(node.firstChild.nodeValue, \"span content\");\n  assert.end();\n});\n\n(0, _tape2.default)(\"element with multiple children\", assert => {\n  var vspan, vinput;\n\n  const vnode = (0, _src.h)(\"div\", null, vspan = (0, _src.h)(\"span\", null, \"span text\"), vinput = (0, _src.h)(\"input\", { type: \"number\" }), \"raw text\");\n\n  const node = (0, _src.mount)(vnode);\n  assert.equal(vnode._node, node);\n\n  assert.equal(node.nodeName, \"DIV\");\n  assert.equal(node.childNodes.length, 3);\n  for (var i = 0; i < vnode.content.length; i++) {\n    var ch = vnode.content[i];\n    assert.equal(ch._node, node.childNodes[i]);\n  }\n\n  assert.equal(vspan._node.nodeName, \"SPAN\");\n  assert.equal(vspan._node.childNodes.length, 1);\n  assert.equal(vspan._node.firstChild.nodeValue, \"span text\");\n\n  assert.equal(vinput._node.nodeName, \"INPUT\");\n  assert.equal(vinput._node.childNodes.length, 0);\n  assert.equal(vinput._node.type, \"number\");\n\n  const vtext = vnode.content[2];\n  assert.equal(vtext._node.nodeName, \"#text\");\n  assert.equal(vtext._node.nodeValue, \"raw text\");\n\n  assert.end();\n});\n\n(0, _tape2.default)(\"render functions\", assert => {\n  function Box(props, content) {\n    return (0, _src.h)(\"h1\", { title: props.title }, content);\n  }\n\n  const vnode = (0, _src.h)(Box, { title: \"box title\" }, \"box content\");\n  const node = (0, _src.mount)(vnode);\n  assert.equal(vnode._node, node);\n\n  assert.equal(node.nodeName, \"H1\");\n  assert.equal(node.title, \"box title\");\n  assert.equal(node.childNodes.length, 1);\n  assert.equal(node.firstChild.nodeValue, \"box content\");\n  assert.end();\n});\n\n(0, _tape2.default)(\"Component\", assert => {\n  const MyComponent = {\n    mount: (props, content) => {\n      var node = document.createElement(\"my-component\");\n      node._payload = [props, content];\n      return node;\n    },\n    patch: () => {},\n    unmount: () => {}\n  };\n\n  const vnode = (0, _src.h)(MyComponent, { some_prop: \"some_prop\" }, { some_cont: \"some_cont\" });\n\n  const node = (0, _src.mount)(vnode);\n  assert.equal(vnode._node, node);\n  assert.equal(node.nodeName, \"MY-COMPONENT\");\n  assert.deepEqual(node._payload, [vnode.props, vnode.content]);\n\n  assert.end();\n});\n\n(0, _tape2.default)(\"svg elements\", assert => {\n  const onclick = () => {};\n\n  const vnode = (0, _src.h)(\"div\", null, (0, _src.h)(\"span\", null, \"...\"), (0, _src.h)(\"svg\", { width: 100, height: 200 }, (0, _src.h)(\"circle\", { cx: 50, cy: 60, r: 40 }), (0, _src.h)(\"a\", { href: \"/link\", show: \"/link2\", actuate: \"/link3\" })), (0, _src.h)(\"span\", { onclick }, \"...\"));\n  const node = (0, _src.mount)(vnode);\n  assert.equal(node.childNodes.length, 3);\n\n  const svgNode = node.childNodes[1];\n  assert.equal(svgNode.nodeName, \"svg\");\n  assert.equal(svgNode.namespaceURI, \"http://www.w3.org/2000/svg\");\n  assert.equal(svgNode.getAttribute(\"width\"), \"100\");\n  assert.equal(svgNode.getAttribute(\"height\"), \"200\");\n  assert.equal(svgNode.childNodes.length, 2);\n\n  const svgCircle = svgNode.childNodes[0];\n  assert.equal(svgCircle.nodeName, \"circle\");\n  assert.equal(svgCircle.namespaceURI, \"http://www.w3.org/2000/svg\");\n  assert.equal(svgCircle.getAttribute(\"cx\"), \"50\");\n  assert.equal(svgCircle.getAttribute(\"cy\"), \"60\");\n  assert.equal(svgCircle.getAttribute(\"r\"), \"40\");\n\n  const svgA = svgNode.childNodes[1];\n  assert.equal(svgA.nodeName, \"a\");\n  assert.equal(svgA.namespaceURI, \"http://www.w3.org/2000/svg\");\n  assert.equal(svgA.getAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\"), \"/link\");\n  assert.equal(svgA.getAttributeNS(\"http://www.w3.org/1999/xlink\", \"show\"), \"/link2\");\n  assert.equal(svgA.getAttributeNS(\"http://www.w3.org/1999/xlink\", \"actuate\"), \"/link3\");\n\n  const span = node.childNodes[2];\n  assert.equal(span.onclick, onclick, \"should set props instead of attrs once svg context is off\");\n\n  assert.end();\n});"},"hash":"d40af7a8976ce4658941aaab3e0b2e70"}