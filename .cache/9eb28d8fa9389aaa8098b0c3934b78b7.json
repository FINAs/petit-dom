{"dependencies":[{"name":"deep-equal","loc":{"line":1,"column":24}},{"name":"defined","loc":{"line":2,"column":22}},{"name":"path","loc":{"line":3,"column":19}},{"name":"inherits","loc":{"line":4,"column":23}},{"name":"events","loc":{"line":5,"column":27}},{"name":"has","loc":{"line":6,"column":18}},{"name":"string.prototype.trim","loc":{"line":7,"column":19}},{"name":"function-bind","loc":{"line":8,"column":19}},{"name":"for-each","loc":{"line":9,"column":22}},{"name":"process"}],"generated":{"js":"var process = require(\"process\");\nvar __dirname = \"E:\\\\projects\\\\repos\\\\petit-dom\\\\node_modules\\\\tape\\\\lib\";\nvar deepEqual = require('deep-equal');\nvar defined = require('defined');\nvar path = require('path');\nvar inherits = require('inherits');\nvar EventEmitter = require('events').EventEmitter;\nvar has = require('has');\nvar trim = require('string.prototype.trim');\nvar bind = require('function-bind');\nvar forEach = require('for-each');\nvar isEnumerable = bind.call(Function.call, Object.prototype.propertyIsEnumerable);\n\nmodule.exports = Test;\n\nvar nextTick = typeof setImmediate !== 'undefined'\n    ? setImmediate\n    : process.nextTick\n;\nvar safeSetTimeout = setTimeout;\n\ninherits(Test, EventEmitter);\n\nvar getTestArgs = function (name_, opts_, cb_) {\n    var name = '(anonymous)';\n    var opts = {};\n    var cb;\n\n    for (var i = 0; i < arguments.length; i++) {\n        var arg = arguments[i];\n        var t = typeof arg;\n        if (t === 'string') {\n            name = arg;\n        } else if (t === 'object') {\n            opts = arg || opts;\n        } else if (t === 'function') {\n            cb = arg;\n        }\n    }\n    return { name: name, opts: opts, cb: cb };\n};\n\nfunction Test (name_, opts_, cb_) {\n    if (! (this instanceof Test)) {\n        return new Test(name_, opts_, cb_);\n    }\n\n    var args = getTestArgs(name_, opts_, cb_);\n\n    this.readable = true;\n    this.name = args.name || '(anonymous)';\n    this.assertCount = 0;\n    this.pendingCount = 0;\n    this._skip = args.opts.skip || false;\n    this._timeout = args.opts.timeout;\n    this._objectPrintDepth = args.opts.objectPrintDepth || 5;\n    this._plan = undefined;\n    this._cb = args.cb;\n    this._progeny = [];\n    this._ok = true;\n\n    for (var prop in this) {\n        this[prop] = (function bind(self, val) {\n            if (typeof val === 'function') {\n                return function bound() {\n                    return val.apply(self, arguments);\n                };\n            }\n            return val;\n        })(this, this[prop]);\n    }\n}\n\nTest.prototype.run = function () {\n    if (this._skip) {\n        this.comment('SKIP ' + this.name);\n    }\n    if (!this._cb || this._skip) {\n        return this._end();\n    }\n    if (this._timeout != null) {\n        this.timeoutAfter(this._timeout);\n    }\n    this.emit('prerun');\n    this._cb(this);\n    this.emit('run');\n};\n\nTest.prototype.test = function (name, opts, cb) {\n    var self = this;\n    var t = new Test(name, opts, cb);\n    this._progeny.push(t);\n    this.pendingCount++;\n    this.emit('test', t);\n    t.on('prerun', function () {\n        self.assertCount++;\n    })\n    \n    if (!self._pendingAsserts()) {\n        nextTick(function () {\n            self._end();\n        });\n    }\n    \n    nextTick(function() {\n        if (!self._plan && self.pendingCount == self._progeny.length) {\n            self._end();\n        }\n    });\n};\n\nTest.prototype.comment = function (msg) {\n    var that = this;\n    forEach(trim(msg).split('\\n'), function (aMsg) {\n        that.emit('result', trim(aMsg).replace(/^#\\s*/, ''));\n    });\n};\n\nTest.prototype.plan = function (n) {\n    this._plan = n;\n    this.emit('plan', n);\n};\n\nTest.prototype.timeoutAfter = function(ms) {\n    if (!ms) throw new Error('timeoutAfter requires a timespan');\n    var self = this;\n    var timeout = safeSetTimeout(function() {\n        self.fail('test timed out after ' + ms + 'ms');\n        self.end();\n    }, ms);\n    this.once('end', function() {\n        clearTimeout(timeout);\n    });\n}\n\nTest.prototype.end = function (err) { \n    var self = this;\n    if (arguments.length >= 1 && !!err) {\n        this.ifError(err);\n    }\n    \n    if (this.calledEnd) {\n        this.fail('.end() called twice');\n    }\n    this.calledEnd = true;\n    this._end();\n};\n\nTest.prototype._end = function (err) {\n    var self = this;\n    if (this._progeny.length) {\n        var t = this._progeny.shift();\n        t.on('end', function () { self._end() });\n        t.run();\n        return;\n    }\n    \n    if (!this.ended) this.emit('end');\n    var pendingAsserts = this._pendingAsserts();\n    if (!this._planError && this._plan !== undefined && pendingAsserts) {\n        this._planError = true;\n        this.fail('plan != count', {\n            expected : this._plan,\n            actual : this.assertCount\n        });\n    }\n    this.ended = true;\n};\n\nTest.prototype._exit = function () {\n    if (this._plan !== undefined &&\n        !this._planError && this.assertCount !== this._plan) {\n        this._planError = true;\n        this.fail('plan != count', {\n            expected : this._plan,\n            actual : this.assertCount,\n            exiting : true\n        });\n    } else if (!this.ended) {\n        this.fail('test exited without ending', {\n            exiting: true\n        });\n    }\n};\n\nTest.prototype._pendingAsserts = function () {\n    if (this._plan === undefined) {\n        return 1;\n    }\n    return this._plan - (this._progeny.length + this.assertCount);\n};\n\nTest.prototype._assert = function assert (ok, opts) {\n    var self = this;\n    var extra = opts.extra || {};\n    \n    var res = {\n        id : self.assertCount ++,\n        ok : Boolean(ok),\n        skip : defined(extra.skip, opts.skip),\n        name : defined(extra.message, opts.message, '(unnamed assert)'),\n        operator : defined(extra.operator, opts.operator),\n        objectPrintDepth : self._objectPrintDepth\n    };\n    if (has(opts, 'actual') || has(extra, 'actual')) {\n        res.actual = defined(extra.actual, opts.actual);\n    }\n    if (has(opts, 'expected') || has(extra, 'expected')) {\n        res.expected = defined(extra.expected, opts.expected);\n    }\n    this._ok = Boolean(this._ok && ok);\n    \n    if (!ok) {\n        res.error = defined(extra.error, opts.error, new Error(res.name));\n    }\n    \n    if (!ok) {\n        var e = new Error('exception');\n        var err = (e.stack || '').split('\\n');\n        var dir = path.dirname(__dirname) + path.sep;\n        \n        for (var i = 0; i < err.length; i++) {\n            var m = /^[^\\s]*\\s*\\bat\\s+(.+)/.exec(err[i]);\n            if (!m) {\n                continue;\n            }\n            \n            var s = m[1].split(/\\s+/);\n            var filem = /((?:\\/|[A-Z]:\\\\)[^:\\s]+:(\\d+)(?::(\\d+))?)/.exec(s[1]);\n            if (!filem) {\n                filem = /((?:\\/|[A-Z]:\\\\)[^:\\s]+:(\\d+)(?::(\\d+))?)/.exec(s[2]);\n                \n                if (!filem) {\n                    filem = /((?:\\/|[A-Z]:\\\\)[^:\\s]+:(\\d+)(?::(\\d+))?)/.exec(s[3]);\n\n                    if (!filem) {\n                        continue;\n                    }\n                }\n            }\n            \n            if (filem[1].slice(0, dir.length) === dir) {\n                continue;\n            }\n            \n            res.functionName = s[0];\n            res.file = filem[1];\n            res.line = Number(filem[2]);\n            if (filem[3]) res.column = filem[3];\n            \n            res.at = m[1];\n            break;\n        }\n    }\n\n    self.emit('result', res);\n    \n    var pendingAsserts = self._pendingAsserts();\n    if (!pendingAsserts) {\n        if (extra.exiting) {\n            self._end();\n        } else {\n            nextTick(function () {\n                self._end();\n            });\n        }\n    }\n    \n    if (!self._planError && pendingAsserts < 0) {\n        self._planError = true;\n        self.fail('plan != count', {\n            expected : self._plan,\n            actual : self._plan - pendingAsserts\n        });\n    }\n};\n\nTest.prototype.fail = function (msg, extra) {\n    this._assert(false, {\n        message : msg,\n        operator : 'fail',\n        extra : extra\n    });\n};\n\nTest.prototype.pass = function (msg, extra) {\n    this._assert(true, {\n        message : msg,\n        operator : 'pass',\n        extra : extra\n    });\n};\n\nTest.prototype.skip = function (msg, extra) {\n    this._assert(true, {\n        message : msg,\n        operator : 'skip',\n        skip : true,\n        extra : extra\n    });\n};\n\nTest.prototype.ok\n= Test.prototype['true']\n= Test.prototype.assert\n= function (value, msg, extra) {\n    this._assert(value, {\n        message : defined(msg, 'should be truthy'),\n        operator : 'ok',\n        expected : true,\n        actual : value,\n        extra : extra\n    });\n};\n\nTest.prototype.notOk\n= Test.prototype['false']\n= Test.prototype.notok\n= function (value, msg, extra) {\n    this._assert(!value, {\n        message : defined(msg, 'should be falsy'),\n        operator : 'notOk',\n        expected : false,\n        actual : value,\n        extra : extra\n    });\n};\n\nTest.prototype.error\n= Test.prototype.ifError\n= Test.prototype.ifErr\n= Test.prototype.iferror\n= function (err, msg, extra) {\n    this._assert(!err, {\n        message : defined(msg, String(err)),\n        operator : 'error',\n        actual : err,\n        extra : extra\n    });\n};\n\nTest.prototype.equal\n= Test.prototype.equals\n= Test.prototype.isEqual\n= Test.prototype.is\n= Test.prototype.strictEqual\n= Test.prototype.strictEquals\n= function (a, b, msg, extra) {\n    this._assert(a === b, {\n        message : defined(msg, 'should be equal'),\n        operator : 'equal',\n        actual : a,\n        expected : b,\n        extra : extra\n    });\n};\n\nTest.prototype.notEqual\n= Test.prototype.notEquals\n= Test.prototype.notStrictEqual\n= Test.prototype.notStrictEquals\n= Test.prototype.isNotEqual\n= Test.prototype.isNot\n= Test.prototype.not\n= Test.prototype.doesNotEqual\n= Test.prototype.isInequal\n= function (a, b, msg, extra) {\n    this._assert(a !== b, {\n        message : defined(msg, 'should not be equal'),\n        operator : 'notEqual',\n        actual : a,\n        notExpected : b,\n        extra : extra\n    });\n};\n\nTest.prototype.deepEqual\n= Test.prototype.deepEquals\n= Test.prototype.isEquivalent\n= Test.prototype.same\n= function (a, b, msg, extra) {\n    this._assert(deepEqual(a, b, { strict: true }), {\n        message : defined(msg, 'should be equivalent'),\n        operator : 'deepEqual',\n        actual : a,\n        expected : b,\n        extra : extra\n    });\n};\n\nTest.prototype.deepLooseEqual\n= Test.prototype.looseEqual\n= Test.prototype.looseEquals\n= function (a, b, msg, extra) {\n    this._assert(deepEqual(a, b), {\n        message : defined(msg, 'should be equivalent'),\n        operator : 'deepLooseEqual',\n        actual : a,\n        expected : b,\n        extra : extra\n    });\n};\n\nTest.prototype.notDeepEqual\n= Test.prototype.notEquivalent\n= Test.prototype.notDeeply\n= Test.prototype.notSame\n= Test.prototype.isNotDeepEqual\n= Test.prototype.isNotDeeply\n= Test.prototype.isNotEquivalent\n= Test.prototype.isInequivalent\n= function (a, b, msg, extra) {\n    this._assert(!deepEqual(a, b, { strict: true }), {\n        message : defined(msg, 'should not be equivalent'),\n        operator : 'notDeepEqual',\n        actual : a,\n        notExpected : b,\n        extra : extra\n    });\n};\n\nTest.prototype.notDeepLooseEqual\n= Test.prototype.notLooseEqual\n= Test.prototype.notLooseEquals\n= function (a, b, msg, extra) {\n    this._assert(!deepEqual(a, b), {\n        message : defined(msg, 'should be equivalent'),\n        operator : 'notDeepLooseEqual',\n        actual : a,\n        expected : b,\n        extra : extra\n    });\n};\n\nTest.prototype['throws'] = function (fn, expected, msg, extra) {\n    if (typeof expected === 'string') {\n        msg = expected;\n        expected = undefined;\n    }\n\n    var caught = undefined;\n\n    try {\n        fn();\n    } catch (err) {\n        caught = { error : err };\n        if ((err != null) && (!isEnumerable(err, 'message') || !has(err, 'message'))) {\n            var message = err.message;\n            delete err.message;\n            err.message = message;\n        }\n    }\n\n    var passed = caught;\n\n    if (expected instanceof RegExp) {\n        passed = expected.test(caught && caught.error);\n        expected = String(expected);\n    }\n\n    if (typeof expected === 'function' && caught) {\n        passed = caught.error instanceof expected;\n        caught.error = caught.error.constructor;\n    }\n\n    this._assert(typeof fn === 'function' && passed, {\n        message : defined(msg, 'should throw'),\n        operator : 'throws',\n        actual : caught && caught.error,\n        expected : expected,\n        error: !passed && caught && caught.error,\n        extra : extra\n    });\n};\n\nTest.prototype.doesNotThrow = function (fn, expected, msg, extra) {\n    if (typeof expected === 'string') {\n        msg = expected;\n        expected = undefined;\n    }\n    var caught = undefined;\n    try {\n        fn();\n    }\n    catch (err) {\n        caught = { error : err };\n    }\n    this._assert(!caught, {\n        message : defined(msg, 'should not throw'),\n        operator : 'throws',\n        actual : caught && caught.error,\n        expected : expected,\n        error : caught && caught.error,\n        extra : extra\n    });\n};\n\nTest.skip = function (name_, _opts, _cb) {\n    var args = getTestArgs.apply(null, arguments);\n    args.opts.skip = true;\n    return Test(args.name, args.opts, args.cb);\n};\n\n// vim: set softtabstop=4 shiftwidth=4:\n\n"},"hash":"9df5e06ac8c5683c898bde0a847e55ab"}