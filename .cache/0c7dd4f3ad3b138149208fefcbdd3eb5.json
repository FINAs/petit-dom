{"dependencies":[{"name":"tape","loc":{"line":1,"column":17}},{"name":"../src/h","loc":{"line":2,"column":18}},{"name":"../src/utils","loc":{"line":3,"column":32}}],"generated":{"js":"\"use strict\";\n\nvar _tape = require(\"tape\");\n\nvar _tape2 = _interopRequireDefault(_tape);\n\nvar _h = require(\"../src/h\");\n\nvar _utils = require(\"../src/utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _tape2.default)(\"empty vnode\", assert => {\n  assert.deepEqual((0, _h.h)(\"div\"), {\n    _vnode: true,\n    isSVG: false,\n    type: \"div\",\n    key: null,\n    props: _utils.EMPTYO,\n    content: _utils.EMPTYAR\n  });\n  assert.end();\n});\n\n(0, _tape2.default)(\"empty vnode with props\", assert => {\n  assert.deepEqual((0, _h.h)(\"div\", { className: \"test\", key: \"key\" }), {\n    _vnode: true,\n    isSVG: false,\n    type: \"div\",\n    key: \"key\",\n    props: { className: \"test\", key: \"key\" },\n    content: _utils.EMPTYAR\n  });\n  assert.end();\n});\n\n(0, _tape2.default)(\"vnode with text content\", assert => {\n  assert.deepEqual((0, _h.h)(\"div\", null, \"text content\"), {\n    _vnode: true,\n    isSVG: false,\n    type: \"div\",\n    key: null,\n    props: _utils.EMPTYO,\n    content: [{ _text: \"text content\" }]\n  });\n  assert.deepEqual((0, _h.h)(\"div\", null, null), {\n    _vnode: true,\n    isSVG: false,\n    type: \"div\",\n    key: null,\n    props: _utils.EMPTYO,\n    content: [{ _text: \"\" }]\n  });\n  assert.end();\n});\n\n(0, _tape2.default)(\"vnode with single vnode content\", assert => {\n  assert.deepEqual((0, _h.h)(\"div\", null, (0, _h.h)(\"span\", null, \"span text\")), {\n    _vnode: true,\n    isSVG: false,\n    type: \"div\",\n    key: null,\n    props: _utils.EMPTYO,\n    content: [{\n      _vnode: true,\n      isSVG: false,\n      type: \"span\",\n      key: null,\n      props: _utils.EMPTYO,\n      content: [{ _text: \"span text\" }]\n    }]\n  });\n  assert.end();\n});\n\n(0, _tape2.default)(\"vnode with multiple vnode contents\", assert => {\n  assert.deepEqual((0, _h.h)(\"div\", null, (0, _h.h)(\"span\", null, \"span text\"), (0, _h.h)(\"input\", { type: \"number\" }), \"raw text\", null), {\n    _vnode: true,\n    isSVG: false,\n    type: \"div\",\n    key: null,\n    props: _utils.EMPTYO,\n    content: [{\n      _vnode: true,\n      isSVG: false,\n      type: \"span\",\n      key: null,\n      props: _utils.EMPTYO,\n      content: [{ _text: \"span text\" }]\n    }, {\n      _vnode: true,\n      isSVG: false,\n      type: \"input\",\n      key: null,\n      props: { type: \"number\" },\n      content: _utils.EMPTYAR\n    }, { _text: \"raw text\" }, { _text: \"\" }]\n  });\n  assert.end();\n});\n\n(0, _tape2.default)(\"vnode with single array content\", assert => {\n  assert.deepEqual((0, _h.h)(\"div\", null, [(0, _h.h)(\"span\", null, \"span text\"), (0, _h.h)(\"input\", { type: \"number\" }), \"raw text\"]), {\n    _vnode: true,\n    isSVG: false,\n    type: \"div\",\n    key: null,\n    props: _utils.EMPTYO,\n    content: [{\n      _vnode: true,\n      isSVG: false,\n      type: \"span\",\n      key: null,\n      props: _utils.EMPTYO,\n      content: [{ _text: \"span text\" }]\n    }, {\n      _vnode: true,\n      isSVG: false,\n      type: \"input\",\n      key: null,\n      props: { type: \"number\" },\n      content: _utils.EMPTYAR\n    }, { _text: \"raw text\" }]\n  });\n  assert.end();\n});\n\n(0, _tape2.default)(\"vnode with nested array content\", assert => {\n  const expected = {\n    _vnode: true,\n    isSVG: false,\n    type: \"div\",\n    key: null,\n    props: _utils.EMPTYO,\n    content: [{\n      _vnode: true,\n      isSVG: false,\n      type: \"span\",\n      key: null,\n      props: _utils.EMPTYO,\n      content: [{ _text: \"span text\" }]\n    }, { _text: \"A\" }, {\n      _vnode: true,\n      isSVG: false,\n      type: \"input\",\n      key: null,\n      props: _utils.EMPTYO,\n      content: _utils.EMPTYAR\n    }, { _text: \"B\" }, { _text: \"raw text\" }]\n  };\n\n  assert.deepEqual((0, _h.h)(\"div\", null, (0, _h.h)(\"span\", null, \"span text\"), [\"A\", (0, _h.h)(\"input\"), \"B\"], \"raw text\"), expected);\n\n  assert.deepEqual((0, _h.h)(\"div\", null, [(0, _h.h)(\"span\", null, \"span text\"), [\"A\", (0, _h.h)(\"input\"), \"B\"], \"raw text\"]), expected);\n  assert.end();\n});\n\n(0, _tape2.default)(\"render functions\", assert => {\n  function Box(props, content) {\n    return (0, _h.h)(\"h1\", { title: props.title }, content);\n  }\n\n  assert.deepEqual((0, _h.h)(Box, { title: \"box title\" }, \"box content\", \"box content 2\"), {\n    _vnode: true,\n    isSVG: false,\n    type: Box,\n    key: null,\n    props: { title: \"box title\" },\n    content: [\"box content\", \"box content 2\"]\n  }, \"content should be passed as a non normalized array to render functions\");\n\n  assert.end();\n});"},"hash":"f33ef3e59d53c575946e7c11b1a8242f"}