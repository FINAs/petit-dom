{"dependencies":[{"name":"tape","loc":{"line":1,"column":17}},{"name":"../src","loc":{"line":2,"column":32}}],"generated":{"js":"\"use strict\";\n\nvar _tape = require(\"tape\");\n\nvar _tape2 = _interopRequireDefault(_tape);\n\nvar _src = require(\"../src\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _tape2.default)(\"select.selectedIndex (single selection)\", assert => {\n  const vnode = (0, _src.h)(\"select\", null, (0, _src.h)(\"option\", { value: \"eat\" }, \"Eat\"), (0, _src.h)(\"option\", { value: \"pray\", selected: true }, \"Pray\"), (0, _src.h)(\"option\", { value: \"love\" }, \"Love\"));\n\n  const node = (0, _src.mount)(vnode);\n  assert.equal(node.selectedIndex, 1, \"selected index should be 1\");\n  assert.equal(node.options[0].selected, false, \"option 0 should not be selected\");\n  assert.equal(node.options[1].selected, true, \"option 1 should be selected\");\n  assert.equal(node.options[2].selected, false, \"option 2 should not be selected\");\n\n  const vnode2 = (0, _src.h)(\"select\", null, (0, _src.h)(\"option\", { value: \"eat\", selected: true }, \"Eat\"), (0, _src.h)(\"option\", { value: \"pray\" }, \"Pray\"), (0, _src.h)(\"option\", { value: \"love\" }, \"Love\"));\n\n  (0, _src.patch)(vnode2, vnode);\n  assert.equal(node.selectedIndex, 0, \"selected index should be 0\");\n  assert.equal(node.options[0].selected, true, \"option 0 should be selected\");\n  assert.equal(node.options[1].selected, false, \"option 1 should not be selected\");\n  assert.equal(node.options[2].selected, false, \"option 2 should not be selected\");\n  assert.end();\n});\n\n(0, _tape2.default)(\"select.value (single selection)\", assert => {\n  const vnode = (0, _src.h)(\"select\", { value: \"pray\" }, (0, _src.h)(\"option\", { value: \"eat\" }, \"Eat\"), (0, _src.h)(\"option\", { value: \"pray\" }, \"Pray\"), (0, _src.h)(\"option\", { value: \"love\" }, \"Love\"));\n\n  const node = (0, _src.mount)(vnode);\n  assert.equal(node.selectedIndex, 1, \"selected index should be 1\");\n  assert.equal(node.options[0].selected, false, \"option 0 should not be selected\");\n  assert.equal(node.options[1].selected, true, \"option 1 should be selected\");\n  assert.equal(node.options[2].selected, false, \"option 2 should not be selected\");\n\n  const vnode2 = (0, _src.h)(\"select\", { value: \"eat\" }, (0, _src.h)(\"option\", { value: \"eat\" }, \"Eat\"), (0, _src.h)(\"option\", { value: \"pray\" }, \"Pray\"), (0, _src.h)(\"option\", { value: \"love\" }, \"Love\"));\n\n  (0, _src.patch)(vnode2, vnode);\n  assert.equal(node.selectedIndex, 0, \"selected index should be 0\");\n  assert.equal(node.options[0].selected, true, \"option 0 should be selected\");\n  assert.equal(node.options[1].selected, false, \"option 1 should not be selected\");\n  assert.equal(node.options[2].selected, false, \"option 2 should not be selected\");\n  assert.end();\n});\n\n(0, _tape2.default)(\"select with multiple = true\", assert => {\n  const vnode = (0, _src.h)(\"select\", { multiple: true }, (0, _src.h)(\"option\", { value: \"eat\", selected: true }, \"Eat\"), (0, _src.h)(\"option\", { value: \"pray\", selected: false }, \"Pray\"), (0, _src.h)(\"option\", { value: \"love\", selected: true }, \"Love\"));\n\n  const node = (0, _src.mount)(vnode);\n  assert.equal(node.selectedOptions.length, 2, \"number of selected options should be 2\");\n  assert.equal(node.selectedOptions[0], node.options[0], \"should select options[0]\");\n  assert.equal(node.selectedOptions[1], node.options[2], \"should select options[2]\");\n  assert.equal(node.options[0].selected, true, \"option 0 should be selected\");\n  assert.equal(node.options[1].selected, false, \"option 1 should not be selected\");\n  assert.equal(node.options[2].selected, true, \"option 2 should be selected\");\n\n  const vnode2 = (0, _src.h)(\"select\", { selectedIndex: -1, multiple: true }, (0, _src.h)(\"option\", { value: \"eat\", selected: true }, \"Eat\"), (0, _src.h)(\"option\", { value: \"pray\", selected: true }, \"Pray\"), (0, _src.h)(\"option\", { value: \"love\", selected: false }, \"Love\"));\n  (0, _src.patch)(vnode2, vnode);\n\n  assert.equal(node.selectedOptions.length, 2, \"number of selected options should be 2\");\n  assert.equal(node.selectedOptions[0], node.options[0], \"should select options[0]\");\n  assert.equal(node.selectedOptions[1], node.options[1], \"should select options[1]\");\n\n  assert.equal(node.options[0].selected, true, \"option 0 should be selected\");\n  assert.equal(node.options[1].selected, true, \"option 1 should be selected\");\n  assert.equal(node.options[2].selected, false, \"option 2 should not be selected\");\n  assert.end();\n});"},"hash":"1286bad07f18de15064fa19cdaa105fa"}